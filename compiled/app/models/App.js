// Generated by CoffeeScript 1.6.3
(function() {
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.App = (function(_super) {
    __extends(App, _super);

    function App() {
      _ref = App.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    App.prototype.initialize = function() {
      var dealer, human, players,
        _this = this;
      this.set('deck', new Deck());
      players = new Players();
      human = new Player({
        name: 'player',
        isDealer: false
      });
      dealer = new Player({
        name: 'dealer',
        isDealer: true
      });
      this.set('dealer', dealer);
      players.add([human, dealer]);
      players.each(function(player) {
        return _this.giveCards(player);
      });
      this.set('currentPlayer', players.first());
      this.set('players', players);
      this.listenTo(this.get('players'), 'I_want_to_hit', function(player) {
        _this.addCardToPlayer(player);
        return _this.nextTurn();
      });
      return this.listenTo(this.get('players'), 'I_want_to_stand', function(player) {
        player.set('done', true);
        return _this.nextTurn();
      });
    };

    App.prototype.newRound = function() {
      var _this = this;
      this.set('deck', new Deck());
      (this.get('players')).each(function(player) {
        player.set("done", false);
        player.set("busted", false);
        return _this.giveCards(player);
      });
      return this.set('currentPlayer', (this.get('players')).first());
    };

    App.prototype.giveCards = function(player) {
      var deck;
      (player.get('hand')).reset();
      deck = this.get('deck');
      (player.get('hand')).add(deck.pop());
      (player.get('hand')).add(deck.pop());
      if (player.get('isDealer')) {
        return (player.get('hand')).at(0).flip();
      }
    };

    App.prototype.addCardToPlayer = function(player) {
      return (this.get('deck')).hitPlayer(player);
    };

    App.prototype.nextTurn = function() {
      var everyoneIsDone, index;
      index = (this.get('players')).models.indexOf(this.get('currentPlayer'));
      this.set('currentPlayer', (this.get('players')).at(index + 1) || (this.get('players')).first());
      if ((this.get('currentPlayer')).get('done')) {
        everyoneIsDone = (this.get('players')).all(function(player) {
          return player.get('done');
        });
        if (everyoneIsDone) {
          alert('GAME ENDED MUTHAFUCKAS');
          this.findWinners();
          return this;
        } else {
          return this.nextTurn();
        }
      } else {
        if ((this.get('currentPlayer')).get('isDealer')) {
          return (this.get('currentPlayer')).stand();
        }
      }
    };

    App.prototype.findWinners = function() {
      var dealer, dealerScores, loser, losers, player, score, scoreToBeat, winner, winners, _i, _j, _k, _len, _len1, _len2, _ref1,
        _this = this;
      winners = [];
      losers = [];
      dealer = this.get('dealer');
      dealerScores = (function() {
        var _i, _len, _ref1, _results;
        _ref1 = (dealer.get('hand')).actualScores();
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          score = _ref1[_i];
          if (score < 22) {
            _results.push(score);
          }
        }
        return _results;
      })();
      scoreToBeat = dealerScores.length ? _.max(dealerScores) : 22;
      if (scoreToBeat > 21) {
        _ref1 = this.get('players');
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          player = _ref1[_i];
          if (!((player === dealer) || (player.get('busted')))) {
            winners.push(player);
          }
        }
      } else {
        (this.get('players')).each(function(player) {
          var bestScore, legitScores;
          if (!player.get('busted')) {
            legitScores = (function() {
              var _j, _len1, _ref2, _results;
              _ref2 = (player.get('hand')).actualScores();
              _results = [];
              for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
                score = _ref2[_j];
                if (score < 22) {
                  _results.push(score);
                }
              }
              return _results;
            })();
            bestScore = legitScores.length ? _.max(legitScores) : 0;
            if (bestScore > scoreToBeat) {
              return winners.push(player);
            } else {
              return losers.push(player);
            }
          } else {
            return losers.push(player);
          }
        });
      }
      winners.length === 0 && winners.push(dealer);
      for (_j = 0, _len1 = winners.length; _j < _len1; _j++) {
        winner = winners[_j];
        winner.set('chips', (winner.get('chips')) + winner.get('currentBet'));
      }
      for (_k = 0, _len2 = losers.length; _k < _len2; _k++) {
        loser = losers[_k];
        loser.set('chips', (loser.get('chips')) - loser.get('currentBet'));
      }
      return this.newRound();
    };

    return App;

  })(Backbone.Model);

}).call(this);

/*
//@ sourceMappingURL=App.map
*/
