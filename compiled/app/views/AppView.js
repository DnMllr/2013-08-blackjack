// Generated by CoffeeScript 1.6.3
(function() {
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.AppView = (function(_super) {
    __extends(AppView, _super);

    function AppView() {
      _ref = AppView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    AppView.prototype.events = {
      "click .hit-button": function() {
        return this.model.get('currentPlayer').hit();
      },
      "click .stand-button": function() {
        return this.model.get('currentPlayer').stand();
      },
      "click .bet10-button": function() {
        return this.model.get('currentPlayer').bet(10);
      },
      "click .bet20-button": function() {
        return this.model.get('currentPlayer').bet(20);
      },
      "click .bet50-button": function() {
        return this.model.get('currentPlayer').bet(50);
      },
      "click .bet100-button": function() {
        return this.model.get('currentPlayer').bet(100);
      }
    };

    AppView.prototype.initialize = function() {
      return this.render();
    };

    AppView.prototype.render = function() {
      var _this = this;
      this.$el.children().detach();
      this.$el.append($('<button class="hit-button">Hit</button> <button class="stand-button">Stand</button>'));
      this.$el.append($('<button class="bet10-button">Bet 10%</button>'));
      this.$el.append($('<button class="bet20-button">Bet 20%</button>'));
      this.$el.append($('<button class="bet50-button">Bet 50%</button>'));
      this.$el.append($('<button class="bet100-button">Bet 100%</button>'));
      return (this.model.get('players')).each(function(player) {
        var container, playerView;
        container = (player.get('isDealer') ? '.deal' : '.play') + 'er-hand-container';
        playerView = new PlayerView({
          model: player
        });
        _this.$el.append($("<div class = " + container + " />").html(playerView.render()));
        return _this.$el;
      });
    };

    return AppView;

  })(Backbone.View);

}).call(this);

/*
//@ sourceMappingURL=AppView.map
*/
